//*******************************************************************
// java 10.0.2
// Levi McCann
// 04/24/2020
// Deardorff CIS 62
// Assignment 6
//*******************************************************************
// Needs to have JOptionPane info changed to work correctly on addDep() and addWithdraw()
// That is the only known issue now -- Both methods above work correct if accountNum is "0000"
//*******************************************************************

import java.lang.Math; // headers MUST be above the first class

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class McCann_ATM extends JFrame 
{
 static Account account01 = new Account();
// static Course course2 = new Course();  <-- Next 3 lines not needed -->
// static Course course3 = new Course();  <--						  -->
// static Course course4 = new Course();  <--                         -->
 static int numOfAccounts = 0;   // Changed from numOfCourses through program
  
  //Define Panels
  static  JPanel menuScreen = new JPanel();
  static  JPanel addScreen = new JPanel();
  static  JPanel listScreen = new JPanel();
  static  JPanel updateScreen = new JPanel();
  static  JPanel deleteScreen = new JPanel();
   
  static  JPanel headerPanel = new JPanel();
  static  JPanel buttonPanel = new JPanel();
  static  JPanel centerPanel = new JPanel();
  
  //define labels   
  static  JLabel pageHeaderLbl = new JLabel("     Account Info:     ");  //Changed from Class Schedulle
  //
  static  JLabel classNameLbl = new JLabel("Name and Type:", JLabel.RIGHT);  //Name and Type:
 // changed to accLbl from locationLbl 
  static  JLabel accLbl = new JLabel("Number:", JLabel.RIGHT);  // Account Num
  //static  JLabel locationLbl = new JLabel("Number:", JLabel.RIGHT);  // Account Num
 
  static  JLabel accBalLbl = new JLabel("Balance:", JLabel.RIGHT);  // balance
//  static  JLabel timeLbl = new JLabel("Balance:", JLabel.RIGHT);  // balance
  // changed from instructorLbl
  static  JLabel inputLbl = new JLabel("Input Amount:", JLabel.RIGHT);  // number for deposit or withdraw
//  static  JLabel instructorLbl = new JLabel("Input Amount:", JLabel.RIGHT);  // number for deposit or withdraw
  static  JLabel blankLbl1 = new JLabel("");
  static  JLabel blankLbl2 = new JLabel("");
  static  JLabel blankLbl3 = new JLabel("");
   
    //define textfields
  static  JTextField tf_className = new JTextField(10);
  
  //  define textfields for new labels
  static  JTextField tf_accType = new JTextField(10);    //Account Type
//  static  JTextField tf_classSection = new JTextField(10);
  static  JTextField tf_accNum = new JTextField(10);  // tf Account Number
//  static  JTextField tf_classLocation = new JTextField(10);
  static  JTextField tf_accBal = new JTextField(10);
//  static  JTextField tf_classTime = new JTextField(10);
  static  JTextField tf_input = new JTextField(10);
//  static  JTextField tf_classInstructor = new JTextField(10);
  
     //define buttons
  //add screen buttons
  static  JButton addSubmitBtn = new JButton("Submit");
  static  JButton addClearBtn = new JButton("Clear");
  static  JButton addBackBtn = new JButton("Back");
  
  // Added more button Definitions for other buttons used LJM for action Listeners
//    static  JButton addSubmitBtn1 = new JButton("Submit Deposit");  //added for Submit Button on Deposit Screen
//    static  JButton addSubmitBtn2 = new JButton("Submit");  // added for Submit Button on Withdraw Screen
//    static  JButton addSubmitBtn3 = new JButton("Submit");  // added for Submit Button on List Screen
    static  JButton addDepBtn = new JButton("Deposit");   // added Deposit Button
    static  JButton addWithdrawBtn = new JButton("Withdraw");
    static  JButton addListBtn = new JButton("List Account");
    static  JButton addSubmitBtn1 = new JButton("Submit");  //added for Submit Button on Deposit Screen
    static  JButton addSubmitBtn2 = new JButton("Submit");  // added for Submit Button on Withdraw Screen
    static  JButton addSubmitBtn3 = new JButton("Submit List Acc");  // added for Submit Button on List Screen
  
  //menu screen buttons
  static  JButton addBtn = new JButton("Add Record");   // Creates new Data
 // changed from listBtn to depBtn
    static  JButton depBtn = new JButton("Deposit");  //  Deposit Button
//  static  JButton listBtn = new JButton("Deposit");  // This will be the Deposit Button
//  static  JButton updateBtn = new JButton("Withdraw");  //This will be the withdraw Button
  
//  static  JButton listBtn = new JButton("List");  // This will be the Deposit Button
//  static  JButton updateBtn = new JButton("Update");  //This will be the withdraw Button
  static  JButton withdrawBtn = new JButton("Withdraw");  // Withdraw 
  static  JButton listBtn = new JButton("Account Info");  // Account Info
//  static  JButton updateBtn = new JButton("Withdraw");  //This will be the withdraw Button
   
  
 public McCann_ATM()
 {
   
 }
  
 public static void main (String []args)
 {
	   
    //set panel layouts   
    menuScreen.setLayout(new GridLayout(2,2,25,25));
    addScreen.setLayout(new BorderLayout());
    headerPanel.setLayout(new FlowLayout());
    buttonPanel.setLayout(new FlowLayout());
    centerPanel.setLayout(new GridLayout(4,3,10,5));
 
    turnOnActionListeners();
 
    addObjectsToAddScreen();
   
    addObjectsToDepScreen();  // Add Objects to Deposit Screen  --LJM
 
   
    menuScreen.add(addBtn);
    menuScreen.add(depBtn);     // add the Deposit Button  --Ljm
//    menuScreen.add(updateBtn);  // Changed to Deposit  --ljm
    menuScreen.add(withdrawBtn);   // add Withdraw Button  --ljm
//   menuScreen.add(deleteBtn);     // add the list account Button  --Ljm
//	menuScreen.add(depBtn);
    menuScreen.add(listBtn);
   
   
    //define window frame and display
    JFrame window = new JFrame("Bank Account Info:");
   
    window.setLayout(new FlowLayout());
    window.add(menuScreen);
    window.add(addScreen);
   
    menuScreen.setVisible(true);
    addScreen.setVisible(false);
   
    window.setSize(500,200);
    window.setLocation(400,400);
    window.setResizable(false);
    window.setVisible(true);
 }
  
  
  
  
  
//************************   Create Data --Add Record-- ********************  
  
 static public void addRecord()
 {
    numOfAccounts++;
    if (numOfAccounts == 1)
    {
      account01.setAccountHolder(tf_className.getText());
//      course1.setName(tf_className.getText());
    
      //  Sets the data that is being created
      
	  account01.setAccountType(tf_accType.getText());
      account01.setAccountNumber(tf_accNum.getText());
      account01.setAccBal(tf_accBal.getText());
      //account01.setDeposit(tf_input.getText());   // Field for entering Deposit or Withdraw Amounts
      
      
//      course1.setSectionID(tf_accType.getText());
//      course1.setRoomNumber(tf_accNum.getText());

      clearAddScreen(); //when adding a record call the clear method
      
      //This button option panel shows what data is being created.

      JOptionPane.showMessageDialog(null, "Account 1: Name " + account01.getAccountHolder() + "\n" +
                                    "Type: " + account01.getAccountType() + "\n" + 
                                    "Number: " + account01.getAccountNumber() + "\n"  +
        							"Balance: " + account01.getAccBal());
    }
 }


//********************************  Add Deposit *********************************************  
  
static public void addDeposit()     // Deposits money into account
 {
    numOfAccounts++;
    if (numOfAccounts == 1)
    {
      account01.setAccountHolder(tf_className.getText());
//      course1.setName(tf_className.getText());
    
      //  Sets the data that is being created
      
	  account01.setAccountType(tf_accType.getText());    // account type
      account01.setAccountNumber(tf_accNum.getText());  // set Account Number
      account01.setAccBal(tf_accBal.getText());          //Account Type
      account01.setDeposit(tf_input.getText());          // sets deposit amount
      
      String userAmt = tf_input.getText();
      double input = Double.parseDouble(userAmt);
      double Tf_input = Double.parseDouble(tf_input.getText());
      //need userAmt variable
//      course1.setSectionID(tf_accType.getText());
//      course1.setRoomNumber(tf_accNum.getText());

      clearAddScreen(); //when adding a record call the clear method
      
      //This button option panel shows what data is being created.

      JOptionPane.showMessageDialog(null, "Account 1: Name " + account01.getAccountHolder() + "\n" +
                                    "Type: " + account01.getAccountType() + "\n" + 
                                    "Number: " + account01.getAccountNumber() + "\n"  + "New Bal: $" +
                                    (input + account01.getAccBal()));
                                    //"Balance: "  + account01.getAccBal());
        							//"Deposit Amt: " + account01.getDeposit(Double.parseDouble(tf_input.getText())) + 
                                    //+ "\n" +
                                   // "Balance: "  + account01.getAccBal());
    }
 }
    
  
  
//*********************************** Add Withdraw method   **********************************************************
  
static public void addWithdraw()     // Withdraw money from account
 {
    numOfAccounts++;
    if (numOfAccounts == 1)
    {
      account01.setAccountHolder(tf_className.getText());
//      course1.setName(tf_className.getText());
    
      //  Sets the data that is being created
      
	  account01.setAccountType(tf_accType.getText());   // get account type
      account01.setAccountNumber(tf_accNum.getText());  // get account number
      
      account01.setAccBal(tf_accBal.getText());         // get account balance
//      account01.setDeposit(tf_input.getText());
      account01.setWithdraw(tf_input.getText());        // how much to withdraw
      
      String userAmt = tf_input.getText();
      double input = Double.parseDouble(userAmt);
      double Tf_input = Double.parseDouble(tf_input.getText());
      //need userAmt variable
//      course1.setSectionID(tf_accType.getText());
//      course1.setRoomNumber(tf_accNum.getText());

      clearAddScreen(); //when adding a record call the clear method
      
      //This button option panel shows what data is being created.

      JOptionPane.showMessageDialog(null, "Account 1: Name " + account01.getAccountHolder() + "\n" +
                                    "Type: " + account01.getAccountType() + "\n" + 
                                    "Number: " + account01.getAccountNumber() + "\n"  + "New Bal: $" +
                                    (input - account01.getAccBal()));
                                    //"Balance: "  + account01.getAccBal());
        							//"Deposit Amt: " + account01.getDeposit(Double.parseDouble(tf_input.getText())) + 
                                    //+ "\n" +
                                   // "Balance: "  + account01.getAccBal());
    }
 }
    
 // ******************************add List Account Method ***********************--->> LJM
  
 static public void addList()     // Withdraw money from account
 {
    numOfAccounts++;
    if (numOfAccounts == 1)
    {
      account01.setAccountHolder(tf_className.getText());
//      course1.setName(tf_className.getText());
    
      //  Sets the data that is being created
      
	  account01.setAccountType(tf_accType.getText());
      account01.setAccountNumber(tf_accNum.getText());
      account01.setAccBal(tf_accBal.getText());
      account01.setAccBal(tf_accBal.getText());
//      account01.setDeposit(tf_input.getText());
//      account01.setDeposit(tf_input.getText());
//      account01.setWithdraw(tf_input.getText());
      
                                 
      String userAmt = tf_input.getText();
      double input = Double.parseDouble(userAmt);
      double Tf_input = Double.parseDouble(tf_input.getText());
      //need userAmt variable
//      course1.setSectionID(tf_accType.getText());
//      course1.setRoomNumber(tf_accNum.getText());

      clearAddScreen(); //when adding a record call the clear method
      
      //This button option panel shows what data is being created.

      JOptionPane.showMessageDialog(null, "List Account: Name " + account01.getAccountHolder() + "\n" +
                                    "Type: " + account01.getAccountType() + "\n" + 
                                    "Number: " + account01.getAccountNumber() + "\n"  + "New Bal: $" +
                                    (input - account01.getAccBal()));
                                    //"Balance: "  + account01.getAccBal());
        							//"Deposit Amt: " + account01.getDeposit(Double.parseDouble(tf_input.getText())) + 
                                    //+ "\n" +
                                   // "Balance: "  + account01.getAccBal());
    }
 }
    
  
  
  
  
 static public void clearAddScreen()
 {
   tf_className.setText("");
   tf_accType.setText("");
   tf_accNum.setText("");   // Account Number
   tf_accBal.setText("");   //accBal
   tf_input.setText("");    // input for withdraw and deposit
   
//   tf_classSection.setText("");  -- not needed
//   tf_classLocation.setText("");  --not needed
//   tf_accBal.setText("");
//   tf_classTime.setText("");  --not needed
//   
//   tf_classInstructor.setText("");
 }
  
  
  
  
  
  
  
  
 static public void addObjectsToAddScreen() //adding objects to add screen panel
 {
       //add objects to panels   
    headerPanel.add(pageHeaderLbl);
   
    centerPanel.add(classNameLbl);     //row 1  Name Label
    centerPanel.add(tf_className);
    centerPanel.add(tf_accType);       // AccountType
//    centerPanel.add(tf_classSection);   
    
    centerPanel.add(accLbl);      //row 2   -- Account Number label
    //centerPanel.add(locationLbl);      //row 2  --line ommitted use above line
    // changed tf
    centerPanel.add(tf_accNum);         // added Number tf
//    centerPanel.add(tf_classLocation);
    centerPanel.add(blankLbl1);
    
    centerPanel.add(accBalLbl);          //row 3  -- balance label
//    centerPanel.add(timeLbl);          //row 3
    centerPanel.add(tf_accBal);
    centerPanel.add(blankLbl2);
    
   
    centerPanel.add(inputLbl);    //row 4  input label
   // centerPanel.add(instructorLbl);    //row 4
    centerPanel.add(tf_input);           // add tf_input box
//    centerPanel.add(tf_classInstructor);
    centerPanel.add(blankLbl3);
    
    buttonPanel.add(addBackBtn);
    buttonPanel.add(addSubmitBtn);   // Submit button on Add Screen
    buttonPanel.add(addClearBtn);
   
   
    //add sub panels to main panel.
    addScreen.add(headerPanel, BorderLayout.NORTH);
    addScreen.add(centerPanel, BorderLayout.CENTER);
    addScreen.add(buttonPanel, BorderLayout.SOUTH);
 }
 
  // Add objects to Deposit Screen
  
 static public void addObjectsToDepScreen() //adding objects to add screen panel
 {
       //add objects to panels   
    headerPanel.add(pageHeaderLbl);
   
    centerPanel.add(classNameLbl);     //row 1  Name Label
    centerPanel.add(tf_className);
    centerPanel.add(tf_accType);       // AccountType
//    centerPanel.add(tf_classSection);   
    
    centerPanel.add(accLbl);      //row 2   -- Account Number label
    //centerPanel.add(locationLbl);      //row 2  --line ommitted use above line
    // changed tf
    centerPanel.add(tf_accNum);         // added Number tf
//    centerPanel.add(tf_classLocation);
    centerPanel.add(blankLbl1);
    
    centerPanel.add(accBalLbl);          //row 3  -- balance label
//    centerPanel.add(timeLbl);          //row 3
    centerPanel.add(tf_accBal);
    centerPanel.add(blankLbl2);
    
   
    centerPanel.add(inputLbl);    //row 4  input label
   // centerPanel.add(instructorLbl);    //row 4
    centerPanel.add(tf_input);           // add tf_input box
//    centerPanel.add(tf_classInstructor);
    centerPanel.add(blankLbl3);
    
    buttonPanel.add(addBackBtn);
    buttonPanel.add(addSubmitBtn1);        // Change to Deposit Submit button
    buttonPanel.add(addClearBtn);
   
   
    //add sub panels to main panel.
    addScreen.add(headerPanel, BorderLayout.NORTH);
    addScreen.add(centerPanel, BorderLayout.CENTER);
    addScreen.add(buttonPanel, BorderLayout.SOUTH);
 }
  
  
  
  
  
  
  
  
  
  ////all action listeners are done here
 static public void turnOnActionListeners()
 {
      //turn on action listener for submit button
	// Menu buttons
    addBtn.addActionListener(new ActionListener() 
    {
        public void actionPerformed(ActionEvent e) 
        {
           menuScreen.setVisible(false);
    	   addScreen.setVisible(true);
        }
    });
   
    //Add screen buttons
    addSubmitBtn.addActionListener(new ActionListener() 
    {
        public void actionPerformed(ActionEvent e) 
        {
           addRecord();
         //  addDeposit(); // add Deposit Action Listener Button event
        // addWithdraw(); // add Withdraw Action Listener Button event add after void method is complete
        // addDelete();   // add Deleter action Listener after event method is complete (void)
        }
    });
   // Add deposit ActionListener    --ljm
      addDepBtn.addActionListener(new ActionListener() 
    {
        public void actionPerformed(ActionEvent e) 
        {
         //  addRecord();
           addDeposit(); // add Deposit Action Listener Button event
        // addWithdraw(); // add Withdraw Action Listener Button event add after void method is complete
        // addDelete();   // add Deleter action Listener after event method is complete (void)
        }
    });
   
   //Add Withdraw ActionListener
    addWithdrawBtn.addActionListener(new ActionListener() 
    {
        public void actionPerformed(ActionEvent e) 
        {
         //  addRecord();
           addDeposit(); // add Deposit Action Listener Button event
        // addWithdraw(); // add Withdraw Action Listener Button event add after void method is complete
        // addDelete();   // add Deleter action Listener after event method is complete (void)
        }
    });
   
   //**** Add List Account ActionListener  -- ljm
   
     addListBtn.addActionListener(new ActionListener() 
    {
        public void actionPerformed(ActionEvent e) 
        {
         //  addRecord();
        //   addDeposit(); // add Deposit Action Listener Button event
        // addWithdraw(); // add Withdraw Action Listener Button event add after void method is complete
         addList();   // add Deleter action Listener after event method is complete (void)
        }
    });
   
   addSubmitBtn1.addActionListener(new ActionListener() 
    {
        public void actionPerformed(ActionEvent e) 
        {
         //  addRecord();
           addDeposit(); // add Deposit Action Listener Button event
        // addWithdraw(); // add Withdraw Action Listener Button event add after void method is complete
        // addDelete();   // add Deleter action Listener after event method is complete (void)
        }
    });
   addSubmitBtn2.addActionListener(new ActionListener() 
    {
        public void actionPerformed(ActionEvent e) 
        {
         //  addRecord();
         //  addDeposit(); // add Deposit Action Listener Button event
         addWithdraw(); // add Withdraw Action Listener Button event add after void method is complete
        // addDelete();   // add Deleter action Listener after event method is complete (void)
        }
    });
   // Add action listener to Deposit Button
   // sets main menu to false when Deposit Button is clicked
    depBtn.addActionListener(new ActionListener() 
    {
        public void actionPerformed(ActionEvent e) 
        {
           menuScreen.setVisible(false);    // default is false ljm
    	   addScreen.setVisible(true);      // default is true ljm
        }
    });
   //add Withdraw Action Listener to set menu visible to False
   withdrawBtn.addActionListener(new ActionListener() 
    {
        public void actionPerformed(ActionEvent e) 
        {
           menuScreen.setVisible(false);    // default is false ljm
    	   addScreen.setVisible(true);      // default is true ljm
        }
    });
   
   //add List Account Action Listener to set menu visible to False
   listBtn.addActionListener(new ActionListener() 
    {
        public void actionPerformed(ActionEvent e) 
        {
           menuScreen.setVisible(false);    // default is false ljm
    	   addScreen.setVisible(true);      // default is true ljm
        }
    });
   
   
   
   // add Deposit action Listener
   depBtn.addActionListener(new ActionListener() 
    {
        public void actionPerformed(ActionEvent e) 
        {
        //   addRecord();
        //   addDeposit(); // add Deposit Action Listener Button event
        //   addWithdraw(); // add Withdraw Action Listener Button event add after void method is complete
        //   addList();;  //
        }
    });
    addClearBtn.addActionListener(new ActionListener() 
    {
        public void actionPerformed(ActionEvent e) 
        {
           clearAddScreen(); //also call the clear method
          // addDeposit();
        }
    });
    addBackBtn.addActionListener(new ActionListener() 
    {
        public void actionPerformed(ActionEvent e) 
        {
           menuScreen.setVisible(true);
    	   addScreen.setVisible(false);
        }
    });
 }
}





//Here is where accessor and mutator class starts
class Account    //Create Account class from Course
{ 
 private String AccountNumber;
 private String AccountType;
 private String AccountHolder;
 
 private double AccountBalance = 0.0;
 private double startingBalance = 000.00;
 private double userAmt = 0.0;
 private double accBal = 0.0;
 //private double AccountBalance = Double.parseDouble(AccountBalance);
 
 private String Name;
 private String sectionID; //not used
 private String roomNumber; //not used
// public double AccountBalance = Double.parseDouble(AccountBalance);
 private String buildingNumber; //not used
 static private int CourseCount=0; //not used

 /******************* Mutator Methods ****************/
 
 public void setAccountNumber (String AccountNumber)
 {
   this.AccountNumber = AccountNumber;
   
 }
 public void setAccountHolder (String AccountHolder)
 {
   this.AccountHolder = AccountHolder;
  
 }
  public double setAccBal (String accBal1)
 {
   this.accBal = Float.parseFloat(accBal1);  //set balance field
    accBal = accBal;
    return accBal;
 }
  
 //Sets deposit
 public double setDeposit (String accBal1)
 {
   this.accBal = Float.parseFloat(accBal1);  //set balance field
//   accBal += accBal;
   return accBal;
 }
  //Sets withdraw
 public double setWithdraw (String accBal1)
 {
   this.accBal = Float.parseFloat(accBal1);  //set balance field
//   accBal -= accBal;
   return accBal;
 }
 //Not Used Line Below
 public void setRoomNumber (String roomNumber)
 {
    this.roomNumber= roomNumber;
    buildingNumber = roomNumber.substring(0,2) + "00";
 }

 //Sets AccountType variable
 public void setAccountType (String AccountType)
{
  this.AccountType = AccountType;
}

//sets opening account balance
 public double setAccountBalance (double AccountBalance)
 {
   this.AccountBalance = 000.00;
   return AccountBalance;
 }

//sets account holder name  
public void setName (String name)
 {
   this.Name = "Annnabelle";
//   return Name;
 }

  
  
 //Not used
 public void setSectionID (String sectionID)
 {
    this.sectionID= sectionID;
    CourseCount++;
 } 
//  public double setAccountBalance()

 /******************* Accessor Methods ****************/

 //gets Account Number  
 public String getAccountNumber()
 {
   return AccountNumber;
 }
 //gets AccountType
 public String getAccountType()
 {
   return AccountType;
 }
 //Gets AccountHolder name
 public String getAccountHolder()
 {
   return AccountHolder;
 }
 
//gets name
   //Gets  name
 public String getName()
 {
   return AccountHolder;
 }
 public double getAccBal() //return account balance
 {
   
   return accBal;
 }
  
//not used
 public String getRoomNumber()
 {
    return roomNumber;
 }
 //not used
 public String getSectionID()
 {
    return sectionID;
 }
 //not used
 public String getBuildingNumber()
 {
    return buildingNumber;
 }
 //not used
 static public int getCourseCount()
 {
    return CourseCount;
 }

 //Gets AccountBalance
 public double getAccountBalance()
 {
   
   return AccountBalance;
 }

 // Withdraw accessors  ----  -------------->>>>
 public double getWithdraw (String accBal1)
 {
   this.accBal = Float.parseFloat(accBal1);  //set balance field
   accBal -= accBal;
   return accBal;
 }
//                                     ------>>>
//withdraw method for AccountBalance
public double getWithdraw (double userAmt)
{
  AccountBalance -= userAmt;
  return AccountBalance;
}
//deposit method for AccountBalance
public double getDeposit (double userAmt)
{
  
  AccountBalance += userAmt;
  return AccountBalance;

}
 
//public double getAccountBalance() {
//  return AccountBalance;
//}
//not used but written for later
public double savingsAccount( double startingBalance ) {
  AccountBalance = startingBalance;
  return AccountBalance;
}
//public int parseWithDefault(String s, int dep) {
//    try {
//        return Integer.parseInt(s);
//    }
//    catch (NumberFormatException e) {
        // It's OK to ignore "e" here because returning a default value is the documented behaviour on invalid input.
//        return dep;
//    }
//  }
  }




//class Course
//{
// private String roomNumber;
// private String sectionID;
// private String buildingNumber;
// private String name; 
// static private int CourseCount=0; 
 
 /******************* Mutator Methods ****************/
// public void setRoomNumber (String roomNumber)
// {
//    this.roomNumber= roomNumber;
//    buildingNumber = roomNumber.substring(0,2) + "00";
// }
// public void setSectionID (String sectionID)
// {
//    this.sectionID= sectionID;
//    CourseCount++;
// } 
//  public void setName (String name)
// {
//    this.name= name;
// } 
//  
// /******************* Accessor Methods ****************/  
// public String getRoomNumber()
// {
//    return roomNumber;
// }
// public String getName()
// {
//    return name;
// }  
// public String getSectionID()
// {
//    return sectionID;
// }
// public String getBuildingNumber()
// {
//    return buildingNumber;
// }
// static public int getCourseCount()
// {
//    return CourseCount;
// }
//}
